# main_module.py

"""–û—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥—É–ª—å –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤."""

import logging
import signal
import sys
import traceback
from typing import Dict, Set, TypedDict, List, Any, Optional
from pathlib import Path
from datetime import datetime
from rich.console import Console
from rich.table import Table
from rich.progress import Progress, SpinnerColumn, TextColumn, BarColumn, TimeElapsedColumn, TimeRemainingColumn
from rich.prompt import Prompt, Confirm
from rich.panel import Panel
from rich import box
from rich.align import Align
import urllib3
import os

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ —Ç–µ—Å—Ç–µ—Ä—ã
from base_tester import BaseTester
from network_tester import NetworkTester
from hostname_tester import HostnameTester
from ssh_tester import SSHTester
from redfish_tester import RedfishTester
from ipmi_tester import IPMITester
from ip_version_tester import IPVersionTester
from vlan_tester import VLANTester
from dns_tester import DNSTester
from mac_tester import MACTester
from interface_tester import InterfaceTester
from load_tester import LoadTester
from ip_filter_tester import IPFilterTester
from diagnostic_tester import DiagnosticTester
from power_state_tester import PowerStateTester
from interface_status_tester import InterfaceStatusTester
from ntp_tester import NTPTester
from manual_ntp_tester import ManualNTPTester
from snmp_tester import SNMPTester
from logger import setup_logger

# –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è urllib3 –æ –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è—Ö
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Rich
console = Console()

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –ø—É—Ç–µ–π
LOG_DIR = Path('logs')
REPORT_DIR = Path('reports')
CONFIG_FILE = Path('config.ini')

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
MIN_ITERATIONS = 1
MAX_ITERATIONS = 10
RETRY_DELAY = 1.0

# –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
LOG_DIR.mkdir(exist_ok=True)
REPORT_DIR.mkdir(exist_ok=True)

# –¶–≤–µ—Ç–æ–≤—ã–µ —Å—Ç–∏–ª–∏
STYLES = {
    'header': 'bold cyan',
    'success': 'bold green',
    'error': 'bold red',
    'warning': 'bold yellow',
    'info': 'bold blue',
    'category': 'bold magenta',
    'key': 'bold white on blue',
    'value': 'bold white',
    'menu_item': 'cyan',
    'selected': 'bold white on blue',
}

class TestCategory(TypedDict):
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–µ—Å—Ç–æ–≤."""
    name: str
    description: str
    tests: List[str]
    icon: str

class TesterDescription(TypedDict):
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è —Ç–µ—Å—Ç–µ—Ä–∞."""
    name: str
    class_obj: Any  # –ò–∑–º–µ–Ω–µ–Ω–æ —Å class_name –Ω–∞ class_obj
    description: str
    details: str
    dependencies: List[str]
    estimated_time: int  # –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

class TestResult(TypedDict):
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    test_name: str
    success: bool
    message: str
    error_details: Optional[str]
    duration: float
    timestamp: str
    test_type: str

# –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–µ—Å—Ç–æ–≤
TEST_CATEGORIES: Dict[str, TestCategory] = {
    'network': {
        'name': '–°–µ—Ç–µ–≤—ã–µ —Ç–µ—Å—Ç—ã',
        'description': '–ë–∞–∑–æ–≤—ã–µ —Å–µ—Ç–µ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è',
        'tests': [
            'Network',          # –ë–∞–∑–æ–≤—ã–µ —Å–µ—Ç–µ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            'IPVersion',        # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ IPv4/IPv6
            'IPFilter',         # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è IP-–∞–¥—Ä–µ—Å–æ–≤
            'VLAN',             # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ VLAN
            'MAC',              # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ MAC-–∞–¥—Ä–µ—Å–æ–≤
            'Interface',        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤
            'InterfaceStatus'   # –°—Ç–∞—Ç—É—Å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤
        ],
        'icon': 'üåê'
    },
    'management': {
        'name': '–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è',
        'description': '–¢–µ—Å—Ç—ã –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤ –∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è',
        'tests': [
            'SSH',             # SSH –¥–æ—Å—Ç—É–ø
            'Redfish',         # Redfish API
            'IPMI',            # IPMI –¥–æ—Å—Ç—É–ø
            'SNMP'             # SNMP –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        ],
        'icon': 'üîß'
    },
    'services': {
        'name': '–°–µ—Ç–µ–≤—ã–µ —Å–µ—Ä–≤–∏—Å—ã',
        'description': '–¢–µ—Å—Ç—ã —Å–µ—Ç–µ–≤—ã—Ö —Å–ª—É–∂–± –∏ –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤',
        'tests': [
            'DNS',             # DNS –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            'NTP',             # NTP —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
            'ManualNTP',       # –†—É—á–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ NTP
            'Hostname'         # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–º–µ–Ω–∏ —Ö–æ—Å—Ç–∞
        ],
        'icon': 'üîå'
    },
    'performance': {
        'name': '–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å',
        'description': '–¢–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –Ω–∞–≥—Ä—É–∑–∫–∏',
        'tests': [
            'Load',            # –¢–µ—Å—Ç—ã –ø–æ–¥ –Ω–∞–≥—Ä—É–∑–∫–æ–π
            'Diagnostic'       # –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ—Å—Ç—ã
        ],
        'icon': 'üìä'
    },
    'power': {
        'name': '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∏—Ç–∞–Ω–∏–µ–º',
        'description': '–¢–µ—Å—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∏—Ç–∞–Ω–∏–µ–º',
        'tests': [
            'PowerState'       # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∏—Ç–∞–Ω–∏–µ–º
        ],
        'icon': '‚ö°'
    }
}

# –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –æ—Ç —Ç–µ—Å—Ç–∞ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
TEST_TO_CATEGORY: Dict[str, str] = {}
for category_key, category in TEST_CATEGORIES.items():
    for test in category['tests']:
        TEST_TO_CATEGORY[test] = category_key

# –û–ø–∏—Å–∞–Ω–∏—è —Ç–µ—Å—Ç–µ—Ä–æ–≤
TESTER_CLASSES: Dict[str, TesterDescription] = {
    'Network': {
        'name': 'Network Tester',
        'class_obj': NetworkTester,
        'description': '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö —Å–µ—Ç–µ–≤—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫',
        'details': """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç:
        - –ù–∞—Å—Ç—Ä–æ–π–∫—É —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ IP
        - –ù–∞—Å—Ç—Ä–æ–π–∫—É DHCP
        - –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ç–∏
        """,
        'dependencies': [],
        'estimated_time': 120
    },
    'IPVersion': {
        'name': 'IP Version Tester',
        'class_obj': IPVersionTester,
        'description': '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ IPv4 –∏ IPv6',
        'details': """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç:
        - –ü–æ–¥–¥–µ—Ä–∂–∫—É IPv4 –∏ IPv6
        - –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤ –ø–æ –æ–±–æ–∏–º –ø—Ä–æ—Ç–æ–∫–æ–ª–∞–º
        - –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–∫ IP –≤–µ—Ä—Å–∏–π
        """,
        'dependencies': ['Network'],
        'estimated_time': 90
    },
    'IPFilter': {
        'name': 'IP Filter Tester',
        'class_obj': IPFilterTester,
        'description': '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ IP-—Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏',
        'details': """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç:
        - –ù–∞—Å—Ç—Ä–æ–π–∫—É –ø—Ä–∞–≤–∏–ª IP-—Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        - –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏/—Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è —Ç—Ä–∞—Ñ–∏–∫–∞
        - –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã —Ñ–∏–ª—å—Ç—Ä–æ–≤ –ø–æ–¥ –Ω–∞–≥—Ä—É–∑–∫–æ–π
        """,
        'dependencies': ['Network'],
        'estimated_time': 110
    },
    'VLAN': {
        'name': 'VLAN Tester',
        'class_obj': VLANTester,
        'description': '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ VLAN',
        'details': """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç:
        - –ù–∞—Å—Ç—Ä–æ–π–∫—É VLAN ID
        - –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏ VLAN
        - –ò–∑–æ–ª—è—Ü–∏—é —Å–µ—Ç–µ–≤–æ–≥–æ —Ç—Ä–∞—Ñ–∏–∫–∞ –º–µ–∂–¥—É VLAN
        """,
        'dependencies': ['Network'],
        'estimated_time': 100
    },
    'MAC': {
        'name': 'MAC Address Tester',
        'class_obj': MACTester,
        'description': '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ MAC-–∞–¥—Ä–µ—Å–æ–≤',
        'details': """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç:
        - –ò–∑–º–µ–Ω–µ–Ω–∏–µ MAC-–∞–¥—Ä–µ—Å–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤
        - –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è MAC-–∞–¥—Ä–µ—Å–æ–≤ —á–µ—Ä–µ–∑ –≤—Å–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã
        - –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å —Å–µ—Ç–∏ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è MAC-–∞–¥—Ä–µ—Å–∞
        """,
        'dependencies': ['Network'],
        'estimated_time': 70
    },
    'Interface': {
        'name': 'Interface Tester',
        'class_obj': InterfaceTester,
        'description': '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ç–µ–≤—ã—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤',
        'details': """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç:
        - –°–æ—Å—Ç–æ—è–Ω–∏–µ (UP/DOWN) –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤
        - –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤
        - –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤ —á–µ—Ä–µ–∑ —Ä–∞–∑–Ω—ã–µ –º–µ—Ç–æ–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        """,
        'dependencies': ['Network'],
        'estimated_time': 60
    },
    'InterfaceStatus': {
        'name': 'Interface Status Tester',
        'class_obj': InterfaceStatusTester,
        'description': '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ç–µ–≤—ã—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤',
        'details': """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç:
        - –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ (UP/DOWN) –≤—Å–µ—Ö —Å–µ—Ç–µ–≤—ã—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤
        - –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤
        - –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        """,
        'dependencies': ['Interface'],
        'estimated_time': 50
    },
    'SSH': {
        'name': 'SSH Tester',
        'class_obj': SSHTester,
        'description': '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ SSH-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π',
        'details': """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç:
        - –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å SSH-—Å–µ—Ä–≤–∏—Å–∞
        - –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        - –°–∫–æ—Ä–æ—Å—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∏ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å
        """,
        'dependencies': ['Network'],
        'estimated_time': 90
    },
    'Redfish': {
        'name': 'Redfish Tester',
        'class_obj': RedfishTester,
        'description': '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Redfish API',
        'details': """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç:
        - –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Redfish API
        - –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –ø–æ–ª—É—á–∞–µ–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        - –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤–Ω–µ—Å–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π —á–µ—Ä–µ–∑ API
        """,
        'dependencies': ['Network'],
        'estimated_time': 150
    },
    'IPMI': {
        'name': 'IPMI Tester',
        'class_obj': IPMITester,
        'description': '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ IPMI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞',
        'details': """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç:
        - –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å IPMI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        - –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–∫ —á–µ—Ä–µ–∑ IPMI
        - –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∏—Ç–∞–Ω–∏–µ–º
        """,
        'dependencies': ['Network'],
        'estimated_time': 120
    },
    'Load': {
        'name': 'Load Tester',
        'class_obj': LoadTester,
        'description': '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–¥ –Ω–∞–≥—Ä—É–∑–∫–æ–π',
        'details': """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç:
        - –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–µ—Ç–µ–≤—ã—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤ –ø–æ–¥ –Ω–∞–≥—Ä—É–∑–∫–æ–π
        - –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã –ø—Ä–∏ –≤—ã—Å–æ–∫–æ–π –Ω–∞–≥—Ä—É–∑–∫–µ
        - –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –Ω–∞–≥—Ä—É–∑–∫–∏
        """,
        'dependencies': ['Network'],
        'estimated_time': 200
    },
    'Diagnostic': {
        'name': 'Diagnostic Tester',
        'class_obj': DiagnosticTester,
        'description': '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π',
        'details': """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç:
        - –°–±–æ—Ä –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        - –ê–Ω–∞–ª–∏–∑ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –ª–æÔøΩÔøΩ–æ–≤
        - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã
        - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        """,
        'dependencies': ['Network'],
        'estimated_time': 180
    },
    'PowerState': {
        'name': 'Power State Tester',
        'class_obj': PowerStateTester,
        'description': '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–∏—Ç–∞–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞',
        'details': """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç:
        - –í–∫–ª—é—á–µ–Ω–∏–µ, –≤—ã–∫–ª—é—á–µ–Ω–∏–µ –∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫—É —Å–µ—Ä–≤–µ—Ä–∞
        - –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å BMC –Ω–∞ –≤—Å–µ—Ö —ç—Ç–∞–ø–∞—Ö —Ä–∞–±–æ—ã —Å–µ—Ä–≤–µ—Ä–∞
        - –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Å—Ç–∞—Ç—É—Å–∞ –ø–∏—Ç–∞–Ω–∏—è —á–µ—Ä–µ–∑ –≤—Å–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã
        """,
        'dependencies': ['IPMI'],
        'estimated_time': 130
    },
    'NTP': {
        'name': 'NTP Tester',
        'class_obj': NTPTester,
        'description': '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ NTP',
        'details': """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç:
        - –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–∫ NTP-—Å–µ—Ä–≤–µ—Ä–æ–≤
        - –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –≤—Ä–µ–º–µ–Ω–∏ —Å NTP-—Å–µ—Ä–≤–µ—Ä–∞–º–∏
        - –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –∏ —Ç–æ—á–Ω–æ—Å—Ç—å –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
        """,
        'dependencies': ['Network'],
        'estimated_time': 90
    },
    'ManualNTP': {
        'name': 'Manual NTP Tester',
        'class_obj': ManualNTPTester,
        'description': '–†—É—á–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ NTP',
        'details': """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç:
        - –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ä—É—á–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ NTP-—Å–µ—Ä–≤–µ—Ä–æ–≤
        - –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
        - –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ —Ä—É—á–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        """,
        'dependencies': ['NTP'],
        'estimated_time': 100
    },
    'SNMP': {
        'name': 'SNMP Tester',
        'class_obj': SNMPTester,
        'description': '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ SNMP-—Å–µ—Ä–≤–µ—Ä–∞ BMC',
        'details': """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç:
        - –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å SNMP-—Å–µ—Ä–≤–µ—Ä–∞
        - –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö, –ø–æ–ª—É—á–∞–µ–º—ã—Ö —á–µ—Ä–µ–∑ SNMP
        - –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —á—Ç–µ–Ω–∏—è –∏ –∑–∞–ø–∏—Å–∏ OID
        - –ü–æ–ª—É—á–µ–Ω–∏–µ SNMP-—Ç—Ä–∞–ø–æ–≤
        """,
        'dependencies': ['Network'],
        'estimated_time': 140
    },
    'DNS': {
        'name': 'DNS Tester',
        'class_obj': DNSTester,
        'description': '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ DNS-–Ω–∞—Å—Ç—Ä–æ–µ–∫',
        'details': """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç:
        - –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–∫ DNS-—Å–µ—Ä–≤–µ—Ä–æ–≤
        - –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –¥–æ–º–µ–Ω–Ω—ã—Ö –∏–º–µ–Ω
        - –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å DNS-—Å–µ—Ä–≤–∏—Å–∞
        """,
        'dependencies': ['Network'],
        'estimated_time': 80
    },
    'Hostname': {
        'name': 'Hostname Tester',
        'class_obj': HostnameTester,
        'description': '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–º–µ–Ω–∏ —Ö–æ—Å—Ç–∞',
        'details': """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç:
        - –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏ —Ö–æ—Å—Ç–∞
        - –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–º–µ–Ω–∏ —Ö–æ—Å—Ç–∞ —á–µ—Ä–µ–∑ –≤—Å–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã
        """,
        'dependencies': ['Network'],
        'estimated_time': 60
    },
}

class TestManager:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–∞–º–∏ –∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ–º —Å –ø–æ–ª–∑–æ–≤–∞—Ç–µ–ª–µ–º."""

    def __init__(self):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç TestManager.

        –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã.
        """
        self.logger: logging.Logger = setup_logger(
            name='main',
            log_file=str(LOG_DIR / 'test.log')
        )
        self.selected_testers: Set[str] = set()
        self.tester_instances: Dict[str, BaseTester] = {}
        self.running = True

    def show_help(self) -> None:
        """
        –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É –ø–æ –≥–æ—Ä—è—á–∏–º –∫–ª–∞–≤–∏—à–∞–º.

        –í—ã–≤–æ–¥–∏—Ç —Ç–∞–±–ª–∏—Ü—É —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –≥–æ—Ä—è—á–∏–º–∏ –∫–ª–∞–≤–∏—à–∞–º–∏ –∏ –∏—Ö –¥–µ–π—Å—Ç–≤–∏—è–º–∏.
        """
        help_table = Table(title="–ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏", box=box.SIMPLE_HEAVY)
        help_table.add_column("–ö–ª–∞–≤–∏—à–∞", style="yellow", no_wrap=True)
        help_table.add_column("–î–µ–π—Å—Ç–≤–∏–µ", style="magenta")

        for key, description in {
            'q': '–í—ã—Ö–æ–¥',
            'h': '–ü–æ–º–æ—â—å',
            'r': '–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤',
            'a': '–í—ã–±—Ä–∞—Ç—å –≤—Å–µ',
            'n': '–°–Ω—è—Ç—å –≤—ã–±–æ—Ä',
            's': '–ü–æ–∏—Å–∫',
            'f': '–§–∏–ª—å—Ç—Ä',
            'v': '–ü—Ä–æ—Å–º–æ—Ç—Ä –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö',
            'c': '–û—á–∏—Å—Ç–∏—Ç—å –∫–æ–Ω—Å–æ–ª—å',
            'b': '–ù–∞–∑–∞–¥'
        }.items():
            help_table.add_row(key, description)

        console.print(help_table)

    def display_testers_table(self, tester_configs: Dict[str, Any]) -> None:
        """
        –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–µ—Ä–æ–≤.

        Args:
            tester_configs (Dict[str, Any]): –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–µ—Ä–æ–≤.
        """
        table = Table(title="–í—ã–±—Ä–∞–Ω–Ω—ã–µ –¢–µ—Å—Ç—ã", box=box.MINIMAL_DOUBLE_HEAD, show_lines=True)
        table.add_column("–¢–µ—Å—Ç–µ—Ä", style="cyan", no_wrap=True)
        table.add_column("–û–ø–∏—Å–∞–Ω–∏–µ", style="magenta")
        table.add_column("–í—Ä–µ–º—è (—Å)", justify="right", style="green")

        for name in tester_configs.keys():
            config = TESTER_CLASSES.get(name)
            if not config:
                continue
            category_key = TEST_TO_CATEGORY.get(name, "")
            category = TEST_CATEGORIES.get(category_key, {})
            icon = category.get('icon', '')
            tester_name = config['name']
            description = config['description']
            estimated_time = config['estimated_time']

            table.add_row(
                f"{icon} {tester_name}",
                description,
                str(estimated_time)
            )

        console.print(table)

    def display_summary(self) -> None:
        """
        –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–≤–æ–¥–∫—É –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º —Ç–µ—Å—Ç–æ–≤.

        –í—ã–≤–æ–¥–∏—Ç –ø–∞–Ω–µ–ª—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ –∏ –ø—Ä–∏–º–µ—Ä–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.
        """
        total_time = sum(TESTER_CLASSES[test]['estimated_time'] for test in self.selected_testers)
        summary_panel = Panel(
            f"""
[bold cyan]–í—ã–±—Ä–∞–Ω–æ —Ç–µ—Å—Ç–æ–≤:[/bold cyan] {len(self.selected_testers)}
[bold cyan]–ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:[/bold cyan] {total_time // 60}–º {total_time % 60}—Å

[bold yellow]–í–Ω–∏–º–∞–Ω–∏–µ! –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —É—Å–ª–æ–≤–∏—è —Å–æ–±–ª—é–¥–µ–Ω—ã:
‚Ä¢ –ù–∞–ª–∏—á–∏–µ —Å–µ—Ç–µ–≤–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
‚Ä¢ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
‚Ä¢ –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å BMC[/bold yellow]
            """,
            title="–°–≤–æ–¥–∫–∞ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º",
            border_style="blue"
        )
        console.print(summary_panel)

    def select_tests_interactive(self) -> Set[str]:
        """
        –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≤—ã–±–æ—Ä —Ç–µ—Å—Ç–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º rich.

        Returns:
            Set[str]: –ù–∞–±–æ—Ä –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤.
        """
        try:
            selected_tests = set()

            while True:
                # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–µ—Å—Ç–æ–≤
                category_table = Table(title="–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –¢–µ—Å—Ç–æ–≤", box=box.ROUNDED, show_lines=True)
                category_table.add_column("‚Ññ", style="yellow", no_wrap=True)
                category_table.add_column("–ö–∞—Ç–µ–≥–æ—Ä–∏—è", style="cyan")
                category_table.add_column("–û–ø–∏—Å–∞–Ω–∏–µ", style="magenta")
                category_table.add_column("–ò–∫–æ–Ω–∫–∞", style="green")

                category_list = list(TEST_CATEGORIES.keys())
                for idx, category_key in enumerate(category_list, start=1):
                    category = TEST_CATEGORIES[category_key]
                    category_table.add_row(
                        str(idx),
                        category['name'],
                        category['description'],
                        category['icon']
                    )

                console.print(category_table)

                # –ó–∞–ø—Ä–æ—Å –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
                console.print("\n[bold cyan]–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–µ—Å—Ç–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1,3), 'all' –¥–ª—è –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π, 'h' –¥–ª—è –ø–æ–º–æ—â–∏, 'r' –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤, 'c' –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∫–æ–Ω—Å–æ–ª–∏ –∏–ª–∏ 'q' –¥–ª—è –≤—ã—Ö–æ–¥–∞:[/bold cyan]")
                choice = Prompt.ask("–í–∞—à –≤—ã–±–æ—Ä").strip().lower()

                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ì–æ—Ä—è—á–∏—Ö –ö–ª–∞–≤–∏—à
                if choice == 'h':
                    self.show_help()
                    continue
                elif choice == 'q':
                    self.quit_program()
                elif choice == 'a':
                    selected_categories = set(category_list)
                    self.logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–µ—Å—Ç–æ–≤")
                elif choice == 'n':
                    selected_categories = set()
                    selected_tests.clear()
                    console.print("[yellow]–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–Ω—è—Ç—ã —Å –≤—ã–±–æ—Ä–∞.[/yellow]")
                    self.logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–Ω—è–ª –≤—ã–±–æ—Ä —Å–æ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ç–µ—Å—Ç–æ–≤")
                    continue
                elif choice == 'r':
                    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –ø—Ä—è–º–æ –∏–∑ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π, –µ—Å–ª–∏ –µ—Å—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç–µ—Ä—ã
                    if self.selected_testers:
                        self.run_tests_directly()
                        continue
                    else:
                        console.print("[yellow]–ù–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –∑–∞–ø—É—Å–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–µ—Å—Ç—ã —Å–Ω–∞—á–∞–ª–∞.[/yellow]")
                        self.logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ø—ã—Ç–∞–ª—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã –±–µ–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–µ—Ä–æ–≤")
                        continue
                elif choice == 'c':
                    self.clear_console()
                    continue
                elif choice == 'v':
                    self.view_selected_tests()
                    continue
                elif choice == 's':
                    keyword = Prompt.ask("–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π").strip()
                    found_categories = self.search_categories(keyword)
                    if found_categories:
                        selected_categories = set(found_categories)
                        console.print(f"[green]–ù–∞–π–¥–µ–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {len(found_categories)}[/green]")
                        self.logger.info(f"–ù–∞–π–¥–µ–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É '{keyword}': {found_categories}")
                    else:
                        console.print(f"[red]–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É '{keyword}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.[/red]")
                        self.logger.info(f"–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É '{keyword}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
                        continue
                elif choice == 'f':
                    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
                    try:
                        min_time = int(Prompt.ask("–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (—Å)").strip())
                        max_time = int(Prompt.ask("–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (—Å)").strip())
                        filtered_categories = [key for key in category_list
                                               if any(TESTER_CLASSES[test]['estimated_time'] >= min_time and TESTER_CLASSES[test]['estimated_time'] <= max_time
                                                      for test in TEST_CATEGORIES[key]['tests'])]
                        if filtered_categories:
                            selected_categories = set(filtered_categories)
                            console.print(f"[green]–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω—ã: {len(filtered_categories)}[/green]")
                            self.logger.info(f"–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω—ã –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {filtered_categories}")
                        else:
                            console.print(f"[red]–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.[/red]")
                            self.logger.info("–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
                            continue
                    except ValueError:
                        console.print("[red]–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.[/red]")
                        self.logger.warning("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏.")
                        continue
                else:
                    selected_categories = set()
                    invalid_entries = []

                    for item in choice.split(","):
                        item = item.strip()
                        if item.isdigit():
                            idx = int(item) - 1
                            if 0 <= idx < len(category_list):
                                selected_categories.add(category_list[idx])
                                self.logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –∫–∞—Ç–µ–≥–æ—Ä–∏—é {category_list[idx]}")
                            else:
                                invalid_entries.append(item)
                                self.logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {item}")
                        else:
                            invalid_entries.append(item)
                            self.logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {item}")

                    if invalid_entries:
                        # –°–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
                        sanitized_invalid = [self.sanitize_input(entry) for entry in invalid_entries]
                        console.print(f"[red]–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {', '.join(sanitized_invalid)}[/red]")
                        self.logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –≤–≤–æ–¥—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {', '.join(sanitized_invalid)}")

                    if not selected_categories:
                        console.print("[red]–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.[/red]")
                        continue

                # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç—ã –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
                for category_key in selected_categories:
                    tests = TEST_CATEGORIES[category_key]['tests']
                    selected_tests.update(tests)

                # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ç–µ—Å—Ç–µ—Ä–æ–≤ –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
                final_selected_tests = self.select_specific_testers(selected_tests)

                return final_selected_tests

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ç–µ—Å—Ç–æ–≤: {e}")
            return set()

    def select_specific_testers(self, available_tests: Set[str]) -> Set[str]:
        """
        –ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã–±—Ä–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ç–µ—Å—Ç–µ—Ä—ã –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö.

        Args:
            available_tests (Set[str]): –ù–∞–±–æ—Ä –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞.

        Returns:
            Set[str]: –ù–∞–±–æ—Ä –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤.
        """
        selected_tests = set()
        available_tests = sorted(available_tests)
        test_list = list(available_tests)
        total_tests = len(test_list)

        while True:
            try:
                # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ—Å—Ç–µ—Ä—ã
                tester_table = Table(title="–î–æ—Å—Ç—É–ø–Ω—ã–µ –¢–µ—Å—Ç–µ—Ä—ã", box=box.ROUNDED, show_lines=True)
                tester_table.add_column("‚Ññ", style="yellow", no_wrap=True)
                tester_table.add_column("–¢–µ—Å—Ç–µ—Ä", style="cyan")
                tester_table.add_column("–û–ø–∏—Å–∞–Ω–∏–µ", style="magenta")
                tester_table.add_column("–í—Ä–µ–º—è (—Å)", justify="right", style="green")

                for idx, test in enumerate(test_list, start=1):
                    config = TESTER_CLASSES[test]
                    tester_table.add_row(
                        str(idx),
                        config['name'],
                        config['description'],
                        str(config['estimated_time'])
                    )

                console.print(tester_table)

                # –ó–∞–ø—Ä–æ—Å –≤—ã–±–æ—Ä–∞ —Ç–µ—Å—Ç–µ—Ä–æ–≤
                console.print("\n[bold cyan]–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ—Å—Ç–µ—Ä—ã –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1,3,5), 'all' –¥–ª—è –≤—Å–µ—Ö —Ç–µ—Å—Ç–µ—Ä–æ–≤, 'b' –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞, 'h' –¥–ª—è –ø–æ–º–æ—â–∏, 'c' –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∫–æ–Ω—Å–æ–ª–∏, 'v' –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∏–ª–∏ 'q' –¥–ª—è –≤—ã—Ö–æ–¥–∞:[/bold cyan]")
                choice = Prompt.ask("–í–∞—à –≤—ã–±–æ—Ä").strip().lower()

                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ì–æ—Ä—è—á–∏—Ö –ö–ª–∞–≤–∏—à
                if choice == 'h':
                    self.show_help()
                    continue
                elif choice == 'q':
                    self.quit_program()
                elif choice == 'a':
                    selected_tests.update(available_tests)
                    self.logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ—Å—Ç–µ—Ä–æ–≤")
                elif choice == 'n':
                    selected_tests.clear()
                    console.print("[yellow]–í—Å–µ —Ç–µ—Å—Ç–µ—Ä—ã —Å–Ω—è—Ç—ã —Å –≤—ã–±–æ—Ä–∞.[/yellow]")
                    self.logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–Ω—è–ª –≤—ã–±–æ—Ä —Å–æ –≤—Å–µ—Ö —Ç–µ—Å—Ç–µ—Ä–æ–≤")
                    continue
                elif choice == 'b':
                    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π
                    return self.select_tests_interactive()
                elif choice == 'c':
                    self.clear_console()
                    continue
                elif choice == 'v':
                    self.view_selected_tests()
                    continue
                elif choice == 'r':
                    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –ø—Ä—è–º–æ –∏–∑ –≤—ã–±–æ—Ä–∞ —Ç–µ—Å—Ç–µ—Ä–æ–≤, –µ—Å–ª–∏ –µ—Å—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç–µ—Ä—ã
                    if self.selected_testers:
                        self.run_tests_directly()
                        continue
                    else:
                        console.print("[yellow]–ù–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –∑–∞–ø—É—Å–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–µ—Å—Ç—ã —Å–Ω–∞—á–∞–ª–∞.[/yellow]")
                        self.logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ø—ã—Ç–∞–ª—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã –±–µ–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–µ—Ä–æ–≤")
                        continue
                elif choice == 's':
                    keyword = Prompt.ask("–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–µ—Å—Ç–µ—Ä–æ–≤").strip()
                    found_testers = self.search_testers(keyword)
                    if found_testers:
                        selected_tests.update(found_testers)
                        console.print(f"[green]–ù–∞–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–µ—Ä–æ–≤: {len(found_testers)}[/green]")
                        self.logger.info(f"–ù–∞–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–µ—Ä–æ–≤ –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É '{keyword}': {found_testers}")
                    else:
                        console.print(f"[red]–¢–µ—Å—Ç–µ—Ä—ã –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É '{keyword}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.[/red]")
                        self.logger.info(f"–¢–µ—Å—Ç–µ—Ä—ã –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É '{keyword}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
                        continue
                elif choice == 'f':
                    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
                    try:
                        min_time = int(Prompt.ask("–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (—Å)").strip())
                        max_time = int(Prompt.ask("–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (—Å)").strip())
                        filtered_testers = [test for test in test_list
                                            if TESTER_CLASSES[test]['estimated_time'] >= min_time and TESTER_CLASSES[test]['estimated_time'] <= max_time]
                        if filtered_testers:
                            selected_tests.update(filtered_testers)
                            console.print(f"[green]–¢–µ—Å—Ç–µ—Ä—ã –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω—ã: {len(filtered_testers)}[/green]")
                            self.logger.info(f"–¢–µ—Å—Ç–µ—Ä—ã –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω—ã –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {filtered_testers}")
                        else:
                            console.print(f"[red]–¢–µ—Å—Ç–µ—Ä—ã –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.[/red]")
                            self.logger.info("–¢–µ—Å—Ç–µ—Ä—ã –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
                            continue
                    except ValueError:
                        console.print("[red]–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.[/red]")
                        self.logger.warning("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏.")
                        continue
                else:
                    invalid_entries = []
                    for item in choice.split(","):
                        item = item.strip()
                        if item.isdigit():
                            idx = int(item) - 1
                            if 0 <= idx < total_tests:
                                selected_tests.add(test_list[idx])
                                self.logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª —Ç–µ—Å—Ç–µ—Ä {test_list[idx]}")
                            else:
                                invalid_entries.append(item)
                                self.logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ—Å—Ç–µ—Ä–∞: {item}")
                        else:
                            invalid_entries.append(item)
                            self.logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –¥–ª—è —Ç–µ—Å—Ç–µ—Ä–∞: {item}")

                    if invalid_entries:
                        # –°–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
                        sanitized_invalid = [self.sanitize_input(entry) for entry in invalid_entries]
                        console.print(f"[red]–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ—Å—Ç–µ—Ä–æ–≤: {', '.join(sanitized_invalid)}[/red]")
                        self.logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –≤–≤–æ–¥—ã —Ç–µ—Å—Ç–µ—Ä–æ–≤: {', '.join(sanitized_invalid)}")

                if not selected_tests:
                    console.print("[red]–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä —Ç–µ—Å—Ç–µ—Ä–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.[/red]")
                    self.logger.info("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä —Ç–µ—Å—Ç–µ—Ä–æ–≤, –ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞")
                    continue

                # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞
                self.display_selected_testers(selected_tests)
                if Confirm.ask("–í—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ –≤—ã–±–æ—Ä —Ç–µ—Å—Ç–µ—Ä–æ–≤?"):
                    break
                else:
                    console.print("[yellow]–î–∞–≤–∞–π—Ç–µ –≤—ã–±–µ—Ä–µ–º —Ç–µ—Å—Ç–µ—Ä—ã –∑–∞–Ω–æ–≤–æ.[/yellow]")
                    selected_tests.clear()
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ç–µ—Å—Ç–µ—Ä–æ–≤: {e}")
                return set()

        return selected_tests

    def search_categories(self, keyword: str) -> List[str]:
        """
        –ò—â–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É.

        Args:
            keyword (str): –ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞.

        Returns:
            List[str]: –°–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π.
        """
        return [key for key, category in TEST_CATEGORIES.items() if keyword.lower() in category['name'].lower() or keyword.lower() in category['description'].lower()]

    def search_testers(self, keyword: str) -> List[str]:
        """
        –ò—â–µ—Ç —Ç–µ—Å—Ç–µ—Ä–æ–≤ –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É.

        Args:
            keyword (str): –ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞.

        Returns:
            List[str]: –°–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–µ—Ä–æ–≤.
        """
        return [test for test, config in TESTER_CLASSES.items() if keyword.lower() in config['name'].lower() or keyword.lower() in config['description'].lower()]

    def clear_console(self) -> None:
        """–û—á–∏—â–∞–µ—Ç –∫–æ–Ω—Å–æ–ª—å."""
        os.system('cls' if os.name == 'nt' else 'clear')
        self.logger.info("–ö–æ–Ω—Å–æ–ª—å –æ—á–∏—â–µ–Ω–∞")

    def view_selected_tests(self) -> None:
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–µ—Ä–æ–≤."""
        if not self.selected_testers:
            console.print("[yellow]–ù–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤.[/yellow]")
            return

        table = Table(title="–¢–µ–∫—É—â–∏–µ –í—ã–±—Ä–∞–Ω–Ω—ã–µ –¢–µ—Å—Ç–µ—Ä—ã", box=box.MINIMAL_DOUBLE_HEAD, show_lines=True)
        table.add_column("–¢–µ—Å—Ç–µ—Ä", style="cyan", no_wrap=True)
        table.add_column("–û–ø–∏—Å–∞–Ω–∏–µ", style="magenta")
        table.add_column("–í—Ä–µ–º—è (—Å)", justify="right", style="green")

        for test in sorted(self.selected_testers):
            config = TESTER_CLASSES[test]
            category_key = TEST_TO_CATEGORY.get(test, "")
            category = TEST_CATEGORIES.get(category_key, {})
            icon = category.get('icon', '')
            table.add_row(
                f"{icon} {config['name']}",
                config['description'],
                str(config['estimated_time'])
            )

        console.print(table)

    def display_selected_testers(self, selected_tests: Set[str]) -> None:
        """
        –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –≤—ã–±–æ—Ä —Ç–µ—Å—Ç–µ—Ä–æ–≤ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.

        Args:
            selected_tests (Set[str]): –ù–∞–±–æ—Ä –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–µ—Ä–æ–≤.
        """
        if not selected_tests:
            console.print("[yellow]–ù–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–µ—Ä–æ–≤.[/yellow]")
            return

        table = Table(title="–í—ã–±—Ä–∞–Ω–Ω—ã–µ –¢–µ—Å—ÇÔøΩÔøΩ—Ä—ã –¥–ª—è –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è", box=box.MINIMAL_DOUBLE_HEAD, show_lines=True)
        table.add_column("–¢–µ—Å—Ç–µ—Ä", style="cyan", no_wrap=True)
        table.add_column("–û–ø–∏—Å–∞–Ω–∏–µ", style="magenta")
        table.add_column("–í—Ä–µ–º—è (—Å)", justify="right", style="green")

        for test in sorted(selected_tests):
            config = TESTER_CLASSES[test]
            category_key = TEST_TO_CATEGORY.get(test, "")
            category = TEST_CATEGORIES.get(category_key, {})
            icon = category.get('icon', '')
            table.add_row(
                f"{icon} {config['name']}",
                config['description'],
                str(config['estimated_time'])
            )

        console.print(table)

    def sanitize_input(self, input_str: str) -> str:
        """
        –°–∞–Ω–∏—Ç–∏–∑–∏—Ä—É–µ—Ç –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è.

        –£–¥–∞–ª—è–µ—Ç –∏–ª–∏ –∑–∞–º–µ–Ω—è–µ—Ç –Ω–µ–ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Å–∏–º–≤–æ–ª—ã.

        Args:
            input_str (str): –í—Ö–æ–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞.

        Returns:
            str: –°–∞–Ω–∏—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞.
        """
        try:
            return input_str.encode('utf-8', 'ignore').decode('utf-8')
        except UnicodeEncodeError:
            return ''

    def validate_test_definitions(self) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –≤—Å–µ —Ç–µ—Å—Ç—ã –≤ TEST_CATEGORIES –∏–º–µ—é—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤ TESTER_CLASSES.

        Returns:
            bool: True, –µ—Å–ª–∏ –≤—Å–µ —Ç–µ—Å—Ç—ã –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã, False –∏–Ω–∞—á–µ.
        """
        missing_tests = []
        for category in TEST_CATEGORIES.values():
            for test in category['tests']:
                if test not in TESTER_CLASSES:
                    missing_tests.append(test)

        if missing_tests:
            console.print("[bold red]–û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö —Ç–µ—Å—Ç–æ–≤:[/bold red]")
            for test in missing_tests:
                console.print(f"- {test}")
            return False
        return True

    def initialize_testers(self) -> Dict[str, Any]:
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç–µ—Ä—ã, –≤–∫–ª—é—á–∞—è –∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏.

        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
            Dict[str, Any]: –°–ª–æ–≤–∞—Ä—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–µ—Ä–æ–≤.
        """
        testers = {}

        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Ç–µ—Å—Ç–µ—Ä—ã
            initial_selected = set(self.selected_testers)
            for name in list(initial_selected):
                config = TESTER_CLASSES[name]
                for dep in config['dependencies']:
                    if dep not in self.selected_testers:
                        console.print(f"[yellow]–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ–≥–æ —Ç–µ—Å—Ç–∞: {dep} –¥–ª—è {name}[/yellow]")
                        self.logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ–≥–æ —Ç–µ—Å—Ç–∞: {dep} –¥–ª—è {name}")
                        self.selected_testers.add(dep)

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ—Å—Ç–µ—Ä—ã
            for name in self.selected_testers:
                config = TESTER_CLASSES.get(name)
                if not config:
                    self.logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–µ—Å—Ç–µ—Ä: {name}")
                    continue

                # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∞—Å—Å —Ç–µ—Å—Ç–µ—Ä–∞
                tester_class = config['class_obj']
                if not tester_class:
                    self.logger.error(f"–ù–µ –Ω–∞–π–¥–µ–Ω –∫–ª–∞—Å—Å –¥–ª—è —Ç–µ—Å—Ç–µ—Ä–∞ {name}")
                    continue

                # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Ç–µ—Å—Ç–µ—Ä–∞
                tester_instance = tester_class(str(CONFIG_FILE), self.logger)
                testers[name] = tester_instance
                self.logger.info(f"–¢–µ—Å—Ç–µ—Ä {name} –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

            self.tester_instances = testers
            return testers

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–µ—Å—Ç–µ—Ä–æ–≤: {e}")
            self.logger.debug(traceback.format_exc())
            return {}

    def run_tests(self, iterations: int) -> Dict[str, List[TestResult]]:
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç—ã –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.

        Args:
            iterations (int): –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞.

        Returns:
            Dict[str, List[TestResult]]: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–µ—Ä–∞.
        """
        test_results: Dict[str, List[TestResult]] = {name: [] for name in self.tester_instances.keys()}

        # –†–∞—Å—á—ë—Ç –æ–±—â–µ–≥–æ –æ–∂–∏–¥–∞–µ–º–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
        total_estimated_time = sum(TESTER_CLASSES[name]['estimated_time'] for name in self.tester_instances.keys()) * iterations

        with Progress(
            SpinnerColumn(),
            TextColumn("[bold blue]{task.description}"),
            BarColumn(),
            TimeElapsedColumn(),
            TimeRemainingColumn(),
            console=console,
            transient=True
        ) as progress:
            task = progress.add_task("[bold blue]–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤...", total=total_estimated_time)
            self.logger.info("–ù–∞—á–∞–ª–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤")

            for iteration in range(iterations):
                self.logger.info(f"–ò—Ç–µ—Ä–∞—Ü–∏—è {iteration + 1}/{iterations}")
                for name, tester in self.tester_instances.items():
                    try:
                        self.logger.info(f"–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ {name}, –∏—Ç–µ—Ä–∞—Ü–∏—è {iteration + 1}")
                        start_time = datetime.now()
                        tester.perform_tests()
                        end_time = datetime.now()

                        # –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                        for result in tester.test_results:
                            # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ —Ç–µ—Å—Ç–µ—Ä—ã –∑–∞–ø–æ–ª–Ω—è—é—Ç –ø–æ–ª—è 'duration' –∏ 'timestamp'
                            if 'duration' not in result or 'timestamp' not in result:
                                result['duration'] = (end_time - start_time).total_seconds()
                                result['timestamp'] = start_time.strftime("%Y-%m-%d %H:%M:%S")
                            test_results[name].append(result)

                        self.logger.info(f"–¢–µ—Å—Ç {name} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {(end_time - start_time).total_seconds():.2f}—Å")

                        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ 'estimated_time'
                        estimated_duration = TESTER_CLASSES[name]['estimated_time']
                        progress.update(task, advance=estimated_duration)
                    except Exception as e:
                        self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞ {name}: {e}")
                        self.logger.debug(traceback.format_exc())
                        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥—Ä—É–≥–∏—Ö —Ç–µ—Å—Ç–æ–≤
                        continue

        self.logger.info("–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
        return test_results

    def generate_test_report(self, tester_results: Dict[str, List[TestResult]], start_time: datetime) -> None:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏.

        –°–æ–∑–¥–∞–µ—Ç –ª–æ–≥-—Ñ–∞–π–ª –∏ Markdown-–æ—Ç—á–µ—Ç —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.

        Args:
            tester_results (Dict[str, List[TestResult]]): –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤.
            start_time (datetime): –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.
        """
        try:
            timestamp = start_time.strftime("%Y%m%d_%H%M%S")
            report_file = REPORT_DIR / f"test_report_{timestamp}.log"

            with open(report_file, 'w', encoding='utf-8') as f:
                f.write("=== –û—Ç—á–µ—Ç –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ ===\n\n")
                f.write(f"–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {start_time}\n")
                f.write(f"–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è: {datetime.now()}\n")
                f.write(
                    f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {(datetime.now() - start_time).total_seconds():.1f}—Å\n\n"
                )

                total_tests = 0
                total_success = 0

                for tester_name, results in tester_results.items():
                    f.write(f"\n=== {tester_name} ===\n")
                    success_count = sum(1 for result in results if result['success'])
                    total_tests += len(results)
                    total_success += success_count

                    f.write(f"–£—Å–ø–µ—à–Ω–æ: {success_count}/{len(results)}\n")

                    for result in results:
                        status = "‚úì" if result['success'] else "ÔøΩÔøΩÔøΩ"
                        msg = f" - {result.get('message', '')}" if result.get('message') else ""
                        error = f"\n–û—à–∏–±–∫–∞: {result.get('error_details', '')}" if result.get('error_details') else ""

                        f.write(
                            f"{status} {result['test_type']}: "
                            f"{msg}{error}\n"
                        )

                # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                success_rate = (total_success / total_tests * 100) if total_tests > 0 else 0
                f.write("\n=== –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ===\n")
                f.write(f"–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}\n")
                f.write(f"–£—Å–ø–µ—à–Ω–æ: {total_success}\n")
                f.write(f"–ù–µ—É–¥–∞—á–Ω–æ: {total_tests - total_success}\n")
                f.write(f"–£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}%\n")

            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Markdown-–æ—Ç—á–µ—Ç–∞ —Å –ø–æ–º–æ—â—å—é rich
            report_markdown = []
            report_markdown.append("# –û—Ç—á–µ—Ç –æ —Ç–µ—Å—Ç–∏—Ä–≤–∞–Ω–∏–∏\n")
            report_markdown.append(f"**–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞:** {start_time}\n")
            report_markdown.append(f"**–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è:** {datetime.now()}\n")
            report_markdown.append(f"**–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:** {(datetime.now() - start_time).total_seconds():.1f}—Å\n")

            total_tests_md = 0
            total_success_md = 0

            for tester_name, results in tester_results.items():
                report_markdown.append(f"## {tester_name}")
                success_count = sum(1 for result in results if result['success'])
                total_tests_md += len(results)
                total_success_md += success_count
                report_markdown.append(f"**–£—Å–ø–µ—à–Ω–æ:** {success_count}/{len(results)}\n")

                for result in results:
                    status = "‚úÖ" if result['success'] else "‚ùå"
                    message = result.get('message', '')
                    error = f" –û—à–∏–±–∫–∞: {result.get('error_details')}" if result.get('error_details') else ""
                    report_markdown.append(f"- {status} **{result['test_type']}**: {message}{error}")

            # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            success_rate_md = (total_success_md / total_tests_md * 100) if total_tests_md > 0 else 0
            report_markdown.append("\n## –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
            report_markdown.append(f"- **–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤:** {total_tests_md}")
            report_markdown.append(f"- **–£—Å–ø–µ—à–Ω–æ:** {total_success_md}")
            report_markdown.append(f"- **–ù–µ—É–¥–∞—á–Ω–æ:** {total_tests_md - total_success_md}")
            report_markdown.append(f"- **–£—Å–ø–µ—à–Ω–æ—Å—Ç—å:** {success_rate_md:.1f}%")

            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ Markdown-–æ—Ç—á–µ—Ç–∞
            markdown_content = "\n".join(report_markdown)
            markdown_file = REPORT_DIR / f"test_report_{timestamp}.md"
            with open(markdown_file, 'w', encoding='utf-8') as f_md:
                f_md.write(markdown_content)

            console.print(
                Panel(
                    f"–û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω:\n- –õ–æ–≥-—Ñ–∞–π–ª: {report_file}\n- Markdown: {markdown_file}",
                    title="–û—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω",
                    border_style="green"
                )
            )
            self.logger.info(f"–û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {report_file} –∏ {markdown_file}")

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")
            self.logger.debug(traceback.format_exc())

    def display_test_report(self, tester_results: Dict[str, List[TestResult]]) -> None:
        """
        –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –æ—Ç—á–µ—Ç –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –≤ –∫–æ–Ω—Å–æ–ª–∏ —Å –ø–æ–º–æ—â—å—é rich.

        Args:
            tester_results (Dict[str, List[TestResult]]): –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–µ—Ä–∞.
        """
        for tester_name, results in tester_results.items():
            console.print(Panel.fit(f"[bold magenta]{tester_name}[/bold magenta]", style="bold blue"))
            table = Table(show_header=True, header_style="bold yellow", box=box.MINIMAL_DOUBLE_HEAD)
            table.add_column("–¢–µ—Å—Ç–µ—Ä", style="cyan", no_wrap=True)
            table.add_column("–°—Ç–∞—Ç—É—Å", style="green")
            table.add_column("–°–æ–æ–±—â–µ–Ω–∏–µ", style="white")

            for result in results:
                status = "[bold green]‚úì[/bold green]" if result['success'] else "[bold red]‚úó[/bold red]"
                message = result.get('message', '')
                table.add_row(result['test_type'], status, message)

            console.print(table)

        # –°–≤–æ–¥–∫–∞
        total = sum(len(tests) for tests in tester_results.values())
        success = sum(result['success'] for tests in tester_results.values() for result in tests)
        failure = total - success
        summary = f"[bold green]–£—Å–ø–µ—à–Ω–æ: {success}[/bold green] / [bold red]–ù–µ—É–¥–∞—á–Ω–æ: {failure}[/bold red] / [bold blue]–í—Å–µ–≥–æ: {total}[/bold blue]"
        console.print(Panel(summary, title="–°–≤–æ–¥–∫–∞", style="bold cyan"))

    def run_tests_directly(self) -> None:
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç—ã –±–µ–∑ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à.

        –í—ã–ø–æ–ª–Ω—è–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é —Ç–µ—Å—Ç–µ—Ä–æ–≤, –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã,
        –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–≤–æ–¥–∫—É, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –∑–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Ç–µ—Ä–∞—Ü–∏–π,
        –∑–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç—ã, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç—ã –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.
        """
        if not self.selected_testers:
            console.print("[yellow]–ù–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –∑–∞–ø—É—Å–∫–∞.[/yellow]")
            self.logger.info("–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤ –±–µ–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–µ—Ä–æ–≤")
            return

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–µ—Ä–æ–≤
        tester_instances = self.initialize_testers()
        if not tester_instances:
            console.print("[red]–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ—Å—Ç–µ—Ä–æ–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.[/red]")
            return

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
        self.display_testers_table({name: {} for name in tester_instances.keys()})

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≤–æ–¥–∫—É –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
        self.display_summary()

        if not Confirm.ask("–ù–∞—á–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤?"):
            self.logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–∞–∑–∞–ª—Å—è –æ—Ç –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤")
            return

        # –ó–∞–ø—Ä–æ—Å –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Ç–µ—Ä–∞—Ü–∏–π
        while True:
            try:
                iterations_input = Prompt.ask(f"\n[bold blue]–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π [{MIN_ITERATIONS}-{MAX_ITERATIONS}]:[/bold blue]")
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à –≤–æ –≤—Ä–µ–º—è –≤–≤–æ–¥–∞
                if iterations_input.lower() == 'h':
                    self.show_help()
                    continue
                elif iterations_input.lower() == 'q':
                    self.quit_program()
                iterations = int(iterations_input)
                if MIN_ITERATIONS <= iterations <= MAX_ITERATIONS:
                    break
                console.print(f"[red]–ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–µ–∂–¥—É {MIN_ITERATIONS} –∏ {MAX_ITERATIONS}.[/red]")
            except ValueError:
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
                if iterations_input.lower() == 'h':
                    self.show_help()
                    continue
                elif iterations_input.lower() == 'q':
                    self.quit_program()
                console.print("[red]–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.[/red]")

        # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
        start_time = datetime.now()
        test_results = self.run_tests(iterations)

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
        self.generate_test_report(test_results, start_time)

        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ –∫–æ–Ω—Å–æ–ª–∏
        self.display_test_report(test_results)

        # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –æ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–∏
        if not Confirm.ask("–•–æ—Ç–∏—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –¥—Ä—É–≥–∏–µ —Ç–µ—Å—Ç—ã?"):
            self.running = False
            self.logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É —Å —Ç–µ—Å—Ç–∞–º–∏")
            self.quit_program()

    def run(self) -> None:
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –ª–æ–≥–∏–∫—É —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.

        –í—ã–≤–æ–¥–∏—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫, –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤, –≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç —Ç–µ—Å—Ç–µ—Ä—ã,
        –∑–∞–ø—É—Å–∫–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø—Ä–æ–≥—Ä–∞–º–º—ã —Å –≤—ã–±–æ—Ä–æ–º –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º —Ç–µ—Å—Ç–æ–≤.
        """
        try:
            # –í—ã–≤–æ–¥ –∑–∞–≥–æ–ª–æ–≤–∫–∞
            header_panel = Panel(
                Align.center(
                    "[bold cyan]–°–∏—Å—Ç–µ–º–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è QA OpenYard[/bold cyan]",
                    vertical="middle"
                ),
                subtitle="[bold yellow]–í–µ—Ä—Å–∏—è 0.1.21[/bold yellow]",
                style="bold blue",
                box=box.ROUNDED
            )
            console.print(header_panel)

            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤
            self.setup_signal_handlers()

            # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ—Å—Ç–µ—Ä–æ–≤
            if not self.validate_test_definitions():
                self.logger.error(
                    "–ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –∏–º–µ—é—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã."
                )
                sys.exit(1)

            # –û—Å–Ω–≤–Ω–æ–π —Ü–∏–∫–ª –ø—Ä–æ–≥—Ä–∞–º–º—ã
            while self.running:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø—Ä–∞–≤–∫—É
                self.show_help()

                # –í—ã–±–æ—Ä —Ç–µ—Å—Ç–æ–≤ —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é
                self.selected_testers = self.select_tests_interactive()
                if not self.selected_testers:
                    console.print("[yellow]–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.[/yellow]")
                    self.logger.info("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                    break

                # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
                self.run_tests_directly()

        except KeyboardInterrupt:
            console.print("\n[yellow]–ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.[/yellow]")
            self.logger.warning("–ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —á–µ—Ä–µ–∑ KeyboardInterrupt")
            self.quit_program()
        except Exception as e:
            if self.logger:
                self.logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
                self.logger.debug(traceback.format_exc())
            console.print(f"[red]–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}[/red]")
            self.quit_program()
        finally:
            console.print("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...")
            input()

    def setup_signal_handlers(self) -> None:
        """
        –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤.

        –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ SIGINT –∏ SIGTERM –æ–±–µ—Å–ø–µ—á–∏–≤–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã
        –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–µ—Ä–µ–¥ –≤—ã—Ö–æ–¥–æ–º.
        """

        def signal_handler(signum: int, frame: Any) -> None:
            """
            –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.

            Args:
                signum (int): –ù–æ–º–µ—Ä —Å–∏–≥–Ω–∞–ª–∞.
                frame (Any): –¢–µ–∫—É—â–∏–π —Å—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤.
            """
            self.logger.warning("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è")
            console.print("\n[yellow]–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...[/yellow]")
            sys.exit(0)

        signal.signal(signal.SIGINT, signal_handler)
        signal.signal(signal.SIGTERM, signal_handler)

    def quit_program(self) -> None:
        """
        –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ—Ç –ø—Ä–æ–≥—Ä–∞–º–º—É.
        """
        self.logger.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        console.print("\n[yellow]–†–∞–±–æ—Ç–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∞[/yellow]")
        sys.exit(0)

def main() -> None:
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã.

    –°–æ–∑–¥–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä TestManager –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –µ–≥–æ.
    """
    manager = TestManager()
    manager.run()

if __name__ == '__main__':
    main()
