"""–û—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥—É–ª—å –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤."""

import logging
import signal
import sys
import traceback
import threading
from typing import Dict, Set, TypedDict, List, Any, Optional
from pathlib import Path
from datetime import datetime
from rich.console import Console
from rich.table import Table
from rich.progress import Progress, SpinnerColumn, TextColumn, BarColumn, TimeElapsedColumn, TimeRemainingColumn
from rich.prompt import Prompt, Confirm
from rich.panel import Panel
from rich import box
from rich.align import Align
from rich.markdown import Markdown

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ —Ç–µ—Å—Ç–µ—Ä—ã
from base_tester import BaseTester
from network_tester import NetworkTester
from hostname_tester import HostnameTester
from ssh_tester import SSHTester
from redfish_tester import RedfishTester
from ipmi_tester import IPMITester
from ip_version_tester import IPVersionTester
from vlan_tester import VLANTester
from dns_tester import DNSTester
from mac_tester import MACTester
from interface_tester import InterfaceTester
from load_tester import LoadTester
from ip_filter_tester import IPFilterTester
from diagnostic_tester import DiagnosticTester
from power_state_tester import PowerStateTester
from interface_status_tester import InterfaceStatusTester
from ntp_tester import NTPTester
from manual_ntp_tester import ManualNTPTester
from snmp_tester import SNMPTester
from logger import setup_logger

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Rich
console = Console()

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –ø—É—Ç–µ–π
LOG_DIR = Path('logs')
REPORT_DIR = Path('reports')
CONFIG_FILE = Path('config.ini')

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
MIN_ITERATIONS = 1
MAX_ITERATIONS = 10
RETRY_DELAY = 1.0

# –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
LOG_DIR.mkdir(exist_ok=True)
REPORT_DIR.mkdir(exist_ok=True)

# –¶–≤–µ—Ç–æ–≤—ã–µ —Å—Ç–∏–ª–∏
STYLES = {
    'header': 'bold cyan',
    'success': 'bold green',
    'error': 'bold red',
    'warning': 'bold yellow',
    'info': 'bold blue',
    'category': 'bold magenta',
    'key': 'bold white on blue',
    'value': 'bold white',
    'menu_item': 'cyan',
    'selected': 'bold white on blue',
}

# –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏ (—É–¥–∞–ª–µ–Ω—ã, —Ç–∞–∫ –∫–∞–∫ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è)
# HOTKEYS = {
#     'q': '–í—ã—Ö–æ–¥',
#     'h': '–ü–æ–º–æ—â—å',
#     'r': '–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤',
#     'a': '–í—ã–±—Ä–∞—Ç—å –≤—Å–µ',
#     'n': '–°–Ω—è—Ç—å –≤—ã–±–æ—Ä',
#     's': '–ü–æ–∏—Å–∫',
#     'f': '–§–∏–ª—å—Ç—Ä',
#     'v': '–ü—Ä–æ—Å–º–æ—Ç—Ä –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö',
#     'c': '–û—á–∏—Å—Ç–∏—Ç—å –∫–æ–Ω—Å–æ–ª—å'
# }

class TestCategory(TypedDict):
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–µ—Å—Ç–æ–≤."""
    name: str
    description: str
    tests: List[str]
    icon: str

class TesterDescription(TypedDict):
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è —Ç–µ—Å—Ç–µ—Ä–∞."""
    name: str
    class_name: str
    description: str
    details: str
    dependencies: List[str]
    estimated_time: int  # –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

class TestResult(TypedDict):
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    test_name: str
    success: bool
    message: str
    error_details: str
    duration: float
    timestamp: str
    test_type: str

# –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–µ—Å—Ç–æ–≤
TEST_CATEGORIES: Dict[str, TestCategory] = {
    'network': {
        'name': '–°–µ—Ç–µ–≤—ã–µ —Ç–µ—Å—Ç—ã',
        'description': '–ë–∞–∑–æ–≤—ã–µ —Å–µ—Ç–µ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è',
        'tests': [
            'Network',          # –ë–∞–∑–æ–≤—ã–µ —Å–µ—Ç–µ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            'IPVersion',        # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ IPv4/IPv6
            'IPFilter',         # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è IP-–∞–¥—Ä–µ—Å–æ–≤
            'VLAN',             # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ VLAN
            'MAC',              # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ MAC-–∞–¥—Ä–µ—Å–æ–≤
            'Interface',        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤
            'InterfaceStatus'   # –°—Ç–∞—Ç—É—Å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤
        ],
        'icon': 'üåê'
    },
    'management': {
        'name': '–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è',
        'description': '–¢–µ—Å—Ç—ã –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤ –∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è',
        'tests': [
            'SSH',             # SSH –¥–æ—Å—Ç—É–ø
            'Redfish',         # Redfish API
            'IPMI',            # IPMI –¥–æ—Å—Ç—É–ø
            'SNMP'             # SNMP –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        ],
        'icon': 'üîß'
    },
    'services': {
        'name': '–°–µ—Ç–µ–≤—ã–µ —Å–µ—Ä–≤–∏—Å—ã',
        'description': '–¢–µ—Å—Ç—ã —Å–µ—Ç–µ–≤—ã—Ö —Å–ª—É–∂–± –∏ –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤',
        'tests': [
            'DNS',             # DNS –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            'NTP',             # NTP —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
            'ManualNTP',       # –†—É—á–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ NTP
            'Hostname'         # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–º–µ–Ω–∏ —Ö–æ—Å—Ç–∞
        ],
        'icon': 'üîå'
    },
    'performance': {
        'name': '–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å',
        'description': '–¢–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –Ω–∞–≥—Ä—É–∑–∫–∏',
        'tests': [
            'Load',            # –¢–µ—Å—Ç—ã –ø–æ–¥ –Ω–∞–≥—Ä—É–∑–∫–æ–π
            'Diagnostic'       # –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ—Å—Ç—ã
        ],
        'icon': 'üìä'
    },
    'power': {
        'name': '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∏—Ç–∞–Ω–∏–µ–º',
        'description': '–¢–µ—Å—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∏—Ç–∞–Ω–∏–µ–º',
        'tests': [
            'PowerState'       # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∏—Ç–∞–Ω–∏–µ–º
        ],
        'icon': '‚ö°'
    }
}

# –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –æ—Ç —Ç–µ—Å—Ç–∞ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
TEST_TO_CATEGORY: Dict[str, str] = {}
for category_key, category in TEST_CATEGORIES.items():
    for test in category['tests']:
        TEST_TO_CATEGORY[test] = category_key

# –û–ø–∏—Å–∞–Ω–∏—è —Ç–µ—Å—Ç–µ—Ä–æ–≤
TESTER_CLASSES: Dict[str, TesterDescription] = {
    'Network': {
        'name': 'Network Tester',
        'class_name': 'NetworkTester',
        'description': '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö —Å–µ—Ç–µ–≤—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫',
        'details': """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç:
        - –ù–∞—Å—Ç—Ä–æ–π–∫—É —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ IP
        - –ù–∞—Å—Ç—Ä–æ–π–∫—É DHCP
        - –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ç–∏
        """,
        'dependencies': [],
        'estimated_time': 120
    },
    'IPVersion': {
        'name': 'IP Version Tester',
        'class_name': 'IPVersionTester',
        'description': '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ IPv4 –∏ IPv6',
        'details': """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç:
        - –ü–æ–¥–¥–µ—Ä–∂–∫—É IPv4 –∏ IPv6
        - –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤ –ø–æ –æ–±–æ–∏–º –ø—Ä–æ—Ç–æ–∫–æ–ª–∞–º
        - –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–∫ IP –≤–µ—Ä—Å–∏–π
        """,
        'dependencies': ['Network'],
        'estimated_time': 90
    },
    'IPFilter': {
        'name': 'IP Filter Tester',
        'class_name': 'IPFilterTester',
        'description': '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ IP-—Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏',
        'details': """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç:
        - –ù–∞—Å—Ç—Ä–æ–π–∫—É –ø—Ä–∞–≤–∏–ª IP-—Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        - –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏/—Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è —Ç—Ä–∞—Ñ–∏–∫–∞
        - –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã —Ñ–∏–ª—å—Ç—Ä–æ–≤ –ø–æ–¥ –Ω–∞–≥—Ä—É–∑–∫–æ–π
        """,
        'dependencies': ['Network'],
        'estimated_time': 110
    },
    'VLAN': {
        'name': 'VLAN Tester',
        'class_name': 'VLANTester',
        'description': '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ VLAN',
        'details': """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç:
        - –ù–∞—Å—Ç—Ä–æ–π–∫—É VLAN ID
        - –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏ VLAN
        - –ò–∑–æ–ª—è—Ü–∏—é —Å–µ—Ç–µ–≤–æ–≥–æ —Ç—Ä–∞—Ñ–∏–∫–∞ –º–µ–∂–¥—É VLAN
        """,
        'dependencies': ['Network'],
        'estimated_time': 100
    },
    'MAC': {
        'name': 'MAC Address Tester',
        'class_name': 'MACTester',
        'description': '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ MAC-–∞–¥—Ä–µ—Å–æ–≤',
        'details': """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç:
        - –ò–∑–º–µ–Ω–µ–Ω–∏–µ MAC-–∞–¥—Ä–µ—Å–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤
        - –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è MAC-–∞–¥—Ä–µ—Å–æ–≤ —á–µ—Ä–µ–∑ –≤—Å–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã
        - –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å —Å–µ—Ç–∏ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è MAC-–∞–¥—Ä–µ—Å–∞
        """,
        'dependencies': ['Network'],
        'estimated_time': 70
    },
    'Interface': {
        'name': 'Interface Tester',
        'class_name': 'InterfaceTester',
        'description': '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ç–µ–≤—ã—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤',
        'details': """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç:
        - –°–æ—Å—Ç–æ—è–Ω–∏–µ (UP/DOWN) –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤
        - –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤
        - –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤ —á–µ—Ä–µ–∑ —Ä–∞–∑–Ω—ã–µ –º–µ—Ç–æ–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        """,
        'dependencies': ['Network'],
        'estimated_time': 60
    },
    'InterfaceStatus': {
        'name': 'Interface Status Tester',
        'class_name': 'InterfaceStatusTester',
        'description': '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ç–µ–≤—ã—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤',
        'details': """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç:
        - –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ (UP/DOWN) –≤—Å–µ—Ö —Å–µ—Ç–µ–≤—ã—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤
        - –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤
        - –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        """,
        'dependencies': ['Interface'],
        'estimated_time': 50
    },
    'SSH': {
        'name': 'SSH Tester',
        'class_name': 'SSHTester',
        'description': '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ SSH-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π',
        'details': """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç:
        - –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å SSH-—Å–µ—Ä–≤–∏—Å–∞
        - –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        - –°–∫–æ—Ä–æ—Å—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∏ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å
        """,
        'dependencies': ['Network'],
        'estimated_time': 90
    },
    'Redfish': {
        'name': 'Redfish Tester',
        'class_name': 'RedfishTester',
        'description': '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Redfish API',
        'details': """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç:
        - –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Redfish API
        - –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –ø–æ–ª—É—á–∞–µ–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        - –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤–Ω–µ—Å–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π —á–µ—Ä–µ–∑ API
        """,
        'dependencies': ['Network'],
        'estimated_time': 150
    },
    'IPMI': {
        'name': 'IPMI Tester',
        'class_name': 'IPMITester',
        'description': '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ IPMI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞',
        'details': """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç:
        - –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å IPMI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        - –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–∫ —á–µ—Ä–µ–∑ IPMI
        - –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∏—Ç–∞–Ω–∏–µ–º
        """,
        'dependencies': ['Network'],
        'estimated_time': 120
    },
    'Load': {
        'name': 'Load Tester',
        'class_name': 'LoadTester',
        'description': '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–¥ –Ω–∞–≥—Ä—É–∑–∫–æ–π',
        'details': """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç:
        - –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–µ—Ç–µ–≤—ã—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤ –ø–æ–¥ –Ω–∞–≥—Ä—É–∑–∫–æ–π
        - –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã –ø—Ä–∏ –≤—ã—Å–æ–∫–æ–π –Ω–∞–≥—Ä—É–∑–∫–µ
        - –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –Ω–∞–≥—Ä—É–∑–∫–∏
        """,
        'dependencies': ['Network'],
        'estimated_time': 200
    },
    'Diagnostic': {
        'name': 'Diagnostic Tester',
        'class_name': 'DiagnosticTester',
        'description': '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π',
        'details': """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç:
        - –°–±–æ—Ä –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        - –ê–Ω–∞–ª–∏–∑ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –ª–æ–≥–æ–≤
        - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã
        - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        """,
        'dependencies': ['Network'],
        'estimated_time': 180
    },
    'PowerState': {
        'name': 'Power State Tester',
        'class_name': 'PowerStateTester',
        'description': '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–∏—Ç–∞–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞',
        'details': """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç:
        - –í–∫–ª—é—á–µ–Ω–∏–µ, –≤—ã–∫–ª—é—á–µ–Ω–∏–µ –∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫—É —Å–µ—Ä–≤–µ—Ä–∞
        - –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å BMC –Ω–∞ –≤—Å–µ—Ö —ç—Ç–∞–ø–∞—Ö —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞
        - –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Å—Ç–∞—Ç—É—Å–∞ –ø–∏—Ç–∞–Ω–∏—è —á–µ—Ä–µ–∑ –≤—Å–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã
        """,
        'dependencies': ['IPMI'],
        'estimated_time': 130
    },
    'NTP': {
        'name': 'NTP Tester',
        'class_name': 'NTPTester',
        'description': '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ NTP',
        'details': """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç:
        - –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–∫ NTP-—Å–µ—Ä–≤–µ—Ä–æ–≤
        - –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –≤—Ä–µ–º–µ–Ω–∏ —Å NTP-—Å–µ—Ä–≤–µ—Ä–∞–º–∏
        - –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –∏ —Ç–æ—á–Ω–æ—Å—Ç—å –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
        """,
        'dependencies': ['Network'],
        'estimated_time': 90
    },
    'ManualNTP': {
        'name': 'Manual NTP Tester',
        'class_name': 'ManualNTPTester',
        'description': '–†—É—á–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ NTP',
        'details': """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç:
        - –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ä—É—á–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ NTP-—Å–µ—Ä–≤–µ—Ä–æ–≤
        - –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
        - –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ —Ä—É—á–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        """,
        'dependencies': ['NTP'],
        'estimated_time': 100
    },
    'SNMP': {
        'name': 'SNMP Tester',
        'class_name': 'SNMPTester',
        'description': '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ SNMP-—Å–µ—Ä–≤–µ—Ä–∞ BMC',
        'details': """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç:
        - –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å SNMP-—Å–µ—Ä–≤–µ—Ä–∞
        - –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö, –ø–æ–ª—É—á–∞–µ–º—ã—Ö —á–µ—Ä–µ–∑ SNMP
        - –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —á—Ç–µ–Ω–∏—è –∏ –∑–∞–ø–∏—Å–∏ OID
        - –ü–æ–ª—É—á–µ–Ω–∏–µ SNMP-—Ç—Ä–∞–ø–æ–≤
        """,
        'dependencies': ['Network'],
        'estimated_time': 140
    },
    'DNS': {
        'name': 'DNS Tester',
        'class_name': 'DNSTester',
        'description': '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ DNS-–Ω–∞—Å—Ç—Ä–æ–µ–∫',
        'details': """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç:
        - –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–∫ DNS-—Å–µ—Ä–≤–µ—Ä–æ–≤
        - –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –¥–æ–º–µ–Ω–Ω—ã—Ö –∏–º–µ–Ω
        - –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å DNS-—Å–µ—Ä–≤–∏—Å–∞
        """,
        'dependencies': ['Network'],
        'estimated_time': 80
    },
    'Hostname': {
        'name': 'Hostname Tester',
        'class_name': 'HostnameTester',
        'description': '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–º–µ–Ω–∏ —Ö–æ—Å—Ç–∞',
        'details': """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç:
        - –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏ —Ö–æ—Å—Ç–∞
        - –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–º–µ–Ω–∏ —Ö–æ—Å—Ç–∞ —á–µ—Ä–µ–∑ –≤—Å–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã
        """,
        'dependencies': ['Network'],
        'estimated_time': 60
    },
}

class TestManager:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–∞–º–∏ –∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ–º —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º."""

    def __init__(self):
        self.logger: Optional[logging.Logger] = None
        self.selected_testers: Set[str] = set()
        self.tester_instances: Dict[str, BaseTester] = {}
        self.running = True

    def show_help(self) -> None:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É –ø–æ –≥–æ—Ä—è—á–∏–º –∫–ª–∞–≤–∏—à–∞–º."""
        help_table = Table(title="–ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏", box=box.SIMPLE_HEAVY)
        help_table.add_column("–ö–ª–∞–≤–∏—à–∞", style="yellow", no_wrap=True)
        help_table.add_column("–î–µ–π—Å—Ç–≤–∏–µ", style="magenta")

        for key, description in {
            'q': '–í—ã—Ö–æ–¥',
            'h': '–ü–æ–º–æ—â—å',
            'r': '–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤',
            'a': '–í—ã–±—Ä–∞—Ç—å –≤—Å–µ',
            'n': '–°–Ω—è—Ç—å –≤—ã–±–æ—Ä',
            's': '–ü–æ–∏—Å–∫',
            'f': '–§–∏–ª—å—Ç—Ä',
            'v': '–ü—Ä–æ—Å–º–æ—Ç—Ä –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö',
            'c': '–û—á–∏—Å—Ç–∏—Ç—å –∫–æ–Ω—Å–æ–ª—å'
        }.items():
            help_table.add_row(key, description)

        console.print(help_table)

    def display_testers_table(self, tester_configs: Dict[str, Any]) -> None:
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–µ—Ä–æ–≤."""
        table = Table(title="–í—ã–±—Ä–∞–Ω–Ω—ã–µ –¢–µ—Å—Ç—ã", box=box.MINIMAL_DOUBLE_HEAD, show_lines=True)
        table.add_column("–¢–µ—Å—Ç–µ—Ä", style="cyan", no_wrap=True)
        table.add_column("–û–ø–∏—Å–∞–Ω–∏–µ", style="magenta")
        table.add_column("–í—Ä–µ–º—è (—Å)", justify="right", style="green")

        for name in tester_configs.keys():
            config = TESTER_CLASSES.get(name)
            if not config:
                continue
            category_key = TEST_TO_CATEGORY.get(name, "")
            category = TEST_CATEGORIES.get(category_key, {})
            icon = category.get('icon', '')
            tester_name = config['name']
            description = config['description']
            estimated_time = config['estimated_time']

            table.add_row(
                f"{icon} {tester_name}",
                description,
                str(estimated_time)
            )

        console.print(table)

    def display_summary(self) -> None:
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–≤–æ–¥–∫—É –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º —Ç–µ—Å—Ç–æ–≤."""
        total_time = sum(TESTER_CLASSES[test]['estimated_time'] for test in self.selected_testers)
        summary_panel = Panel(
            f"""
            [bold cyan]–í—ã–±—Ä–∞–Ω–æ —Ç–µ—Å—Ç–æ–≤:[/bold cyan] {len(self.selected_testers)}
            [bold cyan]–ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:[/bold cyan] {total_time // 60}–º {total_time % 60}—Å

            [bold yellow]–í–Ω–∏–º–∞–Ω–∏–µ! –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —É—Å–ª–æ–≤–∏—è —Å–æ–±–ª—é–¥–µ–Ω—ã:
            ‚Ä¢ –ù–∞–ª–∏—á–∏–µ —Å–µ—Ç–µ–≤–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            ‚Ä¢ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            ‚Ä¢ –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å BMC[/bold yellow]
            """,
            title="–°–≤–æ–¥–∫–∞ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º",
            border_style="blue"
        )
        console.print(summary_panel)

    def select_tests_interactive(self) -> Set[str]:
        """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≤—ã–±–æ—Ä —Ç–µ—Å—Ç–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º rich."""
        try:
            all_tests = [test for category in TEST_CATEGORIES.values() for test in category['tests']]

            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã –≤ —Ç–∞–±–ª–∏—Ü–µ
            test_table = Table(title="–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ—Å—Ç—ã", box=box.ROUNDED, show_lines=True)
            test_table.add_column("‚Ññ", style="yellow", no_wrap=True)
            test_table.add_column("–¢–µ—Å—Ç–µ—Ä", style="cyan")
            test_table.add_column("–û–ø–∏—Å–∞–Ω–∏–µ", style="magenta")
            test_table.add_column("–ö–∞—Ç–µ–≥–æ—Ä–∏—è", style="green")

            test_list = []
            idx = 1
            for category_key, category in TEST_CATEGORIES.items():
                for test in category['tests']:
                    test_list.append((idx, test, TESTER_CLASSES[test]['description'], category['name']))
                    idx += 1

            for row in test_list:
                test_table.add_row(str(row[0]), row[1], row[2], row[3])

            console.print(test_table)

            # –ó–∞–ø—Ä–æ—Å –≤–≤–æ–¥–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            console.print("\n[bold cyan]–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ—Å—Ç–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –∏–ª–∏ 'all' –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤.[/bold cyan]")
            choice = Prompt.ask("–í–∞—à –≤—ã–±–æ—Ä", default="all").strip().lower()

            if choice == 'all':
                self.logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –≤—Å–µ —Ç–µ—Å—Ç—ã")
                return set(all_tests)

            selected_tests = set()
            invalid_entries = []

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
            for item in choice.split(","):
                try:
                    item = item.strip().encode('utf-8').decode('utf-8')
                    if item.isdigit():
                        idx = int(item) - 1
                        if 0 <= idx < len(test_list):
                            selected_tests.add(test_list[idx][1])
                            self.logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª —Ç–µ—Å—Ç {test_list[idx][1]}")
                        else:
                            invalid_entries.append(item)
                            self.logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ—Å—Ç–∞: {item}")
                    else:
                        matches = [test for test in all_tests if item in test.lower() or item in TESTER_CLASSES[test]['description'].lower()]
                        if matches:
                            selected_tests.update(matches)
                            self.logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª —Ç–µ—Å—Ç—ã –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é: {matches}")
                        else:
                            invalid_entries.append(item)
                            self.logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞: {item}")
                except UnicodeError:
                    invalid_entries.append("–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å–∏–º–≤–æ–ª")
                    self.logger.warning("–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –≤–æ –≤–≤–æ–¥–µ")

            if invalid_entries:
                console.print(f"[red]–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤: {', '.join(invalid_entries)}[/red]")
                self.logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –≤–≤–æ–¥—ã: {', '.join(invalid_entries)}")

            if not selected_tests:
                console.print("[red]–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä. –í—ã–±—Ä–∞–Ω–æ –≤—Å–µ —Ç–µ—Å—Ç—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.[/red]")
                self.logger.info("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä, –≤—ã–±—Ä–∞–Ω—ã –≤—Å–µ —Ç–µ—Å—Ç—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
                return set(all_tests)

            return selected_tests
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ç–µ—Å—Ç–æ–≤: {e}")
            return set()

    def validate_test_definitions(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –≤—Å–µ —Ç–µ—Å—Ç—ã –≤ TEST_CATEGORIES –∏–º–µ—é—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤ TESTER_CLASSES."""
        missing_tests = []
        for category in TEST_CATEGORIES.values():
            for test in category['tests']:
                if test not in TESTER_CLASSES:
                    missing_tests.append(test)

        if missing_tests:
            console.print("[bold red]–û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö —Ç–µ—Å—Ç–æ–≤:[/bold red]")
            for test in missing_tests:
                console.print(f"- {test}")
            return False
        return True

    def initialize_testers(self) -> Dict[str, Any]:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç–µ—Ä—ã, –≤–∫–ª—é—á–∞—è –∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏."""
        testers = {}

        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Ç–µ—Å—Ç–µ—Ä—ã
            initial_selected = set(self.selected_testers)
            for name in list(initial_selected):
                config = TESTER_CLASSES[name]
                for dep in config['dependencies']:
                    if dep not in self.selected_testers:
                        console.print(f"[yellow]–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ–≥–æ —Ç–µ—Å—Ç–∞: {dep} –¥–ª—è {name}[/yellow]")
                        self.logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ–≥–æ —Ç–µ—Å—Ç–∞: {dep} –¥–ª—è {name}")
                        self.selected_testers.add(dep)

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ—Å—Ç–µ—Ä—ã
            for name in self.selected_testers:
                config = TESTER_CLASSES.get(name)
                if not config:
                    self.logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–µ—Å—Ç–µ—Ä: {name}")
                    continue

                # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∞—Å—Å —Ç–µ—Å—Ç–µ—Ä–∞
                tester_class = globals().get(config['class_name'])
                if not tester_class:
                    self.logger.error(f"–ù–µ –Ω–∞–π–¥–µ–Ω –∫–ª–∞—Å—Å {config['class_name']} –¥–ª—è —Ç–µ—Å—Ç–µ—Ä–∞ {name}")
                    continue

                # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Ç–µ—Å—Ç–µ—Ä–∞
                tester_instance = tester_class(str(CONFIG_FILE), self.logger)
                testers[name] = tester_instance
                self.logger.info(f"–¢–µ—Å—Ç–µ—Ä {name} –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

            self.tester_instances = testers
            return testers

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–µ—Å—Ç–µ—Ä–æ–≤: {e}")
            self.logger.debug(traceback.format_exc())
            return {}

    def run_tests(self, iterations: int) -> Dict[str, List[TestResult]]:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç—ã –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã."""
        test_results: Dict[str, List[TestResult]] = {name: [] for name in self.tester_instances.keys()}
        total_tests = len(self.tester_instances) * iterations

        with Progress(
            SpinnerColumn(),
            TextColumn("[progress.description]{task.description}"),
            BarColumn(),
            TextColumn("[progress.percentage]{task.percentage:>3.0f}%"),
            TimeElapsedColumn(),
            TimeRemainingColumn(),
            console=console,
            transient=True
        ) as progress:
            task = progress.add_task("[bold blue]–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤...", total=total_tests)
            self.logger.info("–ù–∞—á–∞–ª–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤")

            for iteration in range(iterations):
                self.logger.info(f"–ò—Ç–µ—Ä–∞—Ü–∏—è {iteration + 1}/{iterations}")
                for name, tester in self.tester_instances.items():
                    try:
                        self.logger.info(f"–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ {name}, –∏—Ç–µ—Ä–∞—Ü–∏—è {iteration + 1}")
                        start_time = datetime.now()
                        tester.perform_tests()
                        end_time = datetime.now()

                        # –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                        for result in tester.test_results:
                            test_results[name].append(result)

                        self.logger.info(f"–¢–µ—Å—Ç {name} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {(end_time - start_time).total_seconds():.2f}—Å")
                    except Exception as e:
                        self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞ {name}: {e}")
                        self.logger.debug(traceback.format_exc())

                    progress.update(task, advance=1)

        self.logger.info("–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
        return test_results

    def generate_test_report(self, tester_results: Dict[str, List[TestResult]], start_time: datetime) -> None:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏."""
        try:
            timestamp = start_time.strftime("%Y%m%d_%H%M%S")
            report_file = REPORT_DIR / f"test_report_{timestamp}.log"

            with open(report_file, 'w', encoding='utf-8') as f:
                f.write("=== –û—Ç—á–µ—Ç –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ ===\n\n")
                f.write(f"–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {start_time}\n")
                f.write(f"–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è: {datetime.now()}\n")
                f.write(
                    f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {(datetime.now() - start_time).total_seconds():.1f}—Å\n\n"
                )

                total_tests = 0
                total_success = 0

                for tester_name, results in tester_results.items():
                    f.write(f"\n=== {tester_name} ===\n")
                    success_count = sum(1 for result in results if result['success'])
                    total_tests += len(results)
                    total_success += success_count

                    f.write(f"–£—Å–ø–µ—à–Ω–æ: {success_count}/{len(results)}\n")

                    for result in results:
                        status = "‚úì" if result['success'] else "‚úó"
                        msg = f" - {result.get('message', '')}" if result.get('message') else ""
                        error = f"\n–û—à–∏–±–∫–∞: {result.get('error_details', '')}" if result.get('error_details') else ""

                        f.write(
                            f"{status} {result['test_type']}: "
                            f"{msg}{error}\n"
                        )

                # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                success_rate = (total_success / total_tests * 100) if total_tests > 0 else 0
                f.write("\n=== –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ===\n")
                f.write(f"–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}\n")
                f.write(f"–£—Å–ø–µ—à–Ω–æ: {total_success}\n")
                f.write(f"–ù–µ—É–¥–∞—á–Ω–æ: {total_tests - total_success}\n")
                f.write(f"–£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}%\n")

            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Markdown-–æ—Ç—á–µ—Ç–∞ —Å –ø–æ–º–æ—â—å—é rich
            report_markdown = []
            report_markdown.append("# –û—Ç—á–µ—Ç –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏\n")
            report_markdown.append(f"**–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞:** {start_time}\n")
            report_markdown.append(f"**–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è:** {datetime.now()}\n")
            report_markdown.append(f"**–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:** {(datetime.now() - start_time).total_seconds():.1f}—Å\n")

            total_tests_md = 0
            total_success_md = 0

            for tester_name, results in tester_results.items():
                report_markdown.append(f"## {tester_name}")
                success_count = sum(1 for result in results if result['success'])
                total_tests_md += len(results)
                total_success_md += success_count
                report_markdown.append(f"**–£—Å–ø–µ—à–Ω–æ:** {success_count}/{len(results)}\n")

                for result in results:
                    status = "‚úÖ" if result['success'] else "‚ùå"
                    message = result.get('message', '')
                    error = f" –û—à–∏–±–∫–∞: {result.get('error_details')}" if result.get('error_details') else ""
                    report_markdown.append(f"- {status} **{result['test_type']}**: {message}{error}")

            # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            success_rate_md = (total_success_md / total_tests_md * 100) if total_tests_md > 0 else 0
            report_markdown.append("\n## –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
            report_markdown.append(f"- **–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤:** {total_tests_md}")
            report_markdown.append(f"- **–£—Å–ø–µ—à–Ω–æ:** {total_success_md}")
            report_markdown.append(f"- **–ù–µ—É–¥–∞—á–Ω–æ:** {total_tests_md - total_success_md}")
            report_markdown.append(f"- **–£—Å–ø–µ—à–Ω–æ—Å—Ç—å:** {success_rate_md:.1f}%")

            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ Markdown-–æ—Ç—á–µ—Ç–∞
            markdown_content = "\n".join(report_markdown)
            markdown_file = REPORT_DIR / f"test_report_{timestamp}.md"
            with open(markdown_file, 'w', encoding='utf-8') as f_md:
                f_md.write(markdown_content)

            console.print(
                Panel(
                    f"–û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω:\n- –õ–æ–≥-—Ñ–∞–π–ª: {report_file}\n- Markdown: {markdown_file}",
                    title="–û—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω",
                    border_style="green"
                )
            )
            self.logger.info(f"–û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {report_file} –∏ {markdown_file}")

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")
            self.logger.debug(traceback.format_exc())

    def display_test_report(self, tester_results: Dict[str, List[TestResult]]) -> None:
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –æ—Ç—á–µ—Ç –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –≤ –∫–æ–Ω—Å–æ–ª–∏ —Å –ø–æ–º–æ—â—å—é rich."""
        for tester_name, results in tester_results.items():
            console.print(Panel.fit(f"[bold magenta]{tester_name}[/bold magenta]", style="bold blue"))
            table = Table(show_header=True, header_style="bold yellow", box=box.MINIMAL_DOUBLE_HEAD)
            table.add_column("–¢–µ—Å—Ç–µ—Ä", style="cyan", no_wrap=True)
            table.add_column("–°—Ç–∞—Ç—É—Å", style="green")
            table.add_column("–°–æ–æ–±—â–µ–Ω–∏–µ", style="white")

            for result in results:
                status = "[bold green]‚úì[/bold green]" if result['success'] else "[bold red]‚úó[/bold red]"
                message = result.get('message', '')
                table.add_row(result['test_type'], status, message)

            console.print(table)

        # –°–≤–æ–¥–∫–∞
        total = sum(len(tests) for tests in tester_results.values())
        success = sum(result['success'] for tests in tester_results.values() for result in tests)
        failure = total - success
        summary = f"[bold green]–£—Å–ø–µ—à–Ω–æ: {success}[/bold green] / [bold red]–ù–µ—É–¥–∞—á–Ω–æ: {failure}[/bold red] / [bold blue]–í—Å–µ–≥–æ: {total}[/bold blue]"
        console.print(Panel(summary, title="–°–≤–æ–¥–∫–∞", style="bold cyan"))

    def run(self) -> None:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –ª–æ–≥–∏–∫—É —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
        try:
            # –í—ã–≤–æ–¥ –∑–∞–≥–æ–ª–æ–≤–∫–∞
            header_panel = Panel(
                Align.center(
                    "[bold cyan]–°–∏—Å—Ç–µ–º–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è QA OpenYard[/bold cyan]",
                    vertical="middle"
                ),
                subtitle="[bold yellow]–í–µ—Ä—Å–∏—è 0.1. –ü–µ—Ä–≤—ã–π —Ä–µ–ª–∏–∑[/bold yellow]",
                style="bold blue",
                box=box.ROUNDED
            )
            console.print(header_panel)

            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
            self.logger = setup_logger(
                name='main',
                log_file=str(LOG_DIR / 'test.log')
            )

            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤
            self.setup_signal_handlers()

            # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ—Å—Ç–µ—Ä–æ–≤
            if not self.validate_test_definitions():
                self.logger.error(
                    "–ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –∏–º–µ—é—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã."
                )
                sys.exit(1)

            # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø—Ä–æ–≥—Ä–∞–º–º—ã
            while self.running:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø—Ä–∞–≤–∫—É
                self.show_help()

                # –í—ã–±–æ—Ä —Ç–µ—Å—Ç–æ–≤ —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é
                self.selected_testers = self.select_tests_interactive()
                if not self.selected_testers:
                    console.print("[yellow]–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.[/yellow]")
                    self.logger.info("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                    break

                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
                self.display_testers_table({name: {} for name in self.selected_testers})

                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≤–æ–¥–∫—É –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
                self.display_summary()

                if not Confirm.ask("–ù–∞—á–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤?"):
                    self.logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–∞–∑–∞–ª—Å—è –æ—Ç –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤")
                    continue

                # –ó–∞–ø—Ä–æ—Å –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Ç–µ—Ä–∞—Ü–∏–π
                while True:
                    try:
                        iterations = int(
                            Prompt.ask(f"\n[bold blue]–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π [{MIN_ITERATIONS}-{MAX_ITERATIONS}]:[/bold blue]")
                        )
                        if MIN_ITERATIONS <= iterations <= MAX_ITERATIONS:
                            break
                        console.print(f"[red]–ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–µ–∂–¥—É {MIN_ITERATIONS} –∏ {MAX_ITERATIONS}.[/red]")
                    except ValueError:
                        console.print("[red]–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.[/red]")

                # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
                start_time = datetime.now()
                test_results = self.run_tests(iterations)

                # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
                self.generate_test_report(test_results, start_time)

                # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ –∫–æ–Ω—Å–æ–ª–∏
                self.display_test_report(test_results)

                # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –æ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–∏
                if not Confirm.ask("–•–æ—Ç–∏—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –¥—Ä—É–≥–∏–µ —Ç–µ—Å—Ç—ã?"):
                    self.running = False
                    self.logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É —Å —Ç–µ—Å—Ç–∞–º–∏")
                    break

        except KeyboardInterrupt:
            console.print("\n[yellow]–ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.[/yellow]")
            self.logger.warning("–ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —á–µ—Ä–µ–∑ KeyboardInterrupt")
        except Exception as e:
            if self.logger:
                self.logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
                self.logger.debug(traceback.format_exc())
            console.print(f"[red]–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}[/red]")
        finally:
            if self.logger:
                self.logger.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")

            console.print("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...")
            input()

    def setup_signal_handlers(self) -> None:
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤."""
        def signal_handler(signum: int, frame: Any) -> None:
            self.logger.warning("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è")
            console.print("\n[yellow]–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...[/yellow]")
            sys.exit(0)

        signal.signal(signal.SIGINT, signal_handler)
        signal.signal(signal.SIGTERM, signal_handler)

def main() -> None:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã."""
    manager = TestManager()
    manager.run()

if __name__ == '__main__':
    main()
